import httpx
import re
from bs4 import BeautifulSoup
# import asyncio
import base64
from cryptography.fernet import Fernet
from vkbottle import API, VKAPIError, PhotoWallUploader

import config
from config import settings


def check_key():
    key_file = settings.base_dir / '.key'
    if not key_file.is_file():
        key = Fernet.generate_key()
        with open(settings.base_dir / '.key', 'wb+') as f:
            f.write(key)


def encode_str(string):
    key_file = settings.base_dir / '.key'
    key = key_file.read_bytes()
    cipher = Fernet(key)
    return cipher.encrypt(string.encode('utf-8'))


def decode_str(string):
    key_file = settings.base_dir / '.key'
    key = key_file.read_bytes()
    cipher = Fernet(key)
    return cipher.decrypt(string).decode('utf-8')


async def yd_ids(url: str, login: str, password: str):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ Id –≥—Ä—É–ø–ø, Id —Å—Ç–∞–Ω—Ü–∏–∏, —Ñ–ª–∞–≥–∞ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    :param url: –∞–¥—Ä–µ—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ —Å–≤–µ—Ç–æ—Ñ–æ—Ä–æ–º
    :param login: –ª–æ–≥–∏–Ω YD
    :param password: –ø–∞—Ä–æ–ª—å YD
    :return: (—Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø, Id —Å—Ç–∞–Ω—Ü–∏–∏, —Ñ–ª–∞–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    """
    async with httpx.AsyncClient() as client:
        response = await client.post('https://adm.yadonor.ru/index.php?obj=BLOOD_STATIONS', data={'login': login, 'password': password})
           # TODO: –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Ç—É –ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞–º –ø–∏—Ö–Ω—É–ª–∏
        print(response)
        if response.status_code == 302:
            is_user = True
        else:
            is_user = False
        params_url = url.split('?')[1]
        station_id = ''
        for param in params_url.split('&'):
            if param.split('=')[0] == 'BLOOD_STATIONS_ID':
                station_id = param.split('=')[1]
            if param.split('=')[0] == 'BLOOD_RESERVE_ID':
                n_first = int(param.split('=')[1])
                groups = [str(x) for x in range(n_first, n_first + 8)]
        print(groups, station_id, is_user)
        return groups, station_id, is_user


def make_message(light: dict[str:str], start_text: str=None, end_text: str = None, hashtag:str = None):
    """
    –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–≤–µ—Ç–æ—Ñ–æ—Ä–∞
    :param light: –®–∞–±–ª–æ–Ω –≥–æ—Ç–æ–≤–æ–≥–æ —Å–≤–µ—Ç–æ—Ñ–æ—Ä–∞
    :param start_text: –ù–∞—á–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
    :param end_text: –ö–æ–Ω–µ—á–Ω—ã–π —Ç–µ–∫—Å—Ç
    :param hashtag: –•—ç—à—Ç–µ–≥–∏
    :return: –°—Ç—Ä–æ–∫–∞ —Å –≥–æ—Ç–æ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è —Å–≤–µ—Ç–æ—Ñ–æ—Ä–∞
    """
    message_str = ''
    if not any(x in light.values() for x in ['yellow', 'red']):
        message_str = '–£–≤–∞–∂–∞–µ–º—ã–µ –¥–æ–Ω–æ—Ä—ã, —Å–µ–≥–æ–¥–Ω—è: \n–í—Å–µ—Ö –≥—Ä—É–ø–ø –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ!'

    else:

        if start_text:
            message_str = f'{start_text}\n'
        else:
            message_str = '–£–≤–∞–∂–∞–µ–º—ã–µ –¥–æ–Ω–æ—Ä—ã, –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å –Ω–∞—à ¬´–î–æ–Ω–æ—Ä—Å–∫–∏–π —Å–≤–µ—Ç–æ—Ñ–æ—Ä¬ª –≤—ã–≥–ª—è–¥–∏—Ç —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:\n'
        yellow_str = ''
        red_str = ''
        for group, value in light.items():
            if value == 'yellow':
                yellow_str += f'{settings.group.__getattribute__(group)}, '
            if value == 'red':
                red_str += f'{settings.group.__getattribute__(group)}, '
        if yellow_str:
            # message_str += f'–ï—Å—Ç—å –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å:\nüü° {yellow_str.rstrip(', ')}\n'
            message_str += f'–ï—Å—Ç—å –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å:\n{'\n'.join(f'üü° {x}' for x in yellow_str.rstrip(', ').split(', '))}\n'
        if red_str:
            # message_str += f'–ü–æ–≤—ã—à–µ–Ω–Ω–∞—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å:\nüî¥ {red_str.rstrip(', ')}\n'
            message_str += f'–ü–æ–≤—ã—à–µ–Ω–Ω–∞—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å:\n{'\n'.join(f'üî¥ {x}' for x in red_str.rstrip(', ').split(', '))}\n'
        if end_text:
            message_str += f'{end_text}\n'
        else:
            message_str += ('–ñ–¥–µ–º –¥–æ–Ω–æ—Ä–æ–≤ –Ω–∞ –∫—Ä–æ–≤–æ–¥–∞—á—É (–Ω–µ –ø–ª–∞–∑–º—É‚õî) –±–µ–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–ø–∏—Å–∏ '
                            '(–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–¥–∞—á–∏ –í–∞–º–∏ –∫—Ä–æ–≤–∏ '
                            '—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º —É—Ç–æ—á–Ω–∏—Ç—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É 286-013)\n')
    if hashtag:
        message_str += f'{hashtag}\n'
    return message_str


async def get_vk_group_id(token:str, group_link: str):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ ID –≥—Ä—É–ø–ø—ã –≤ –í–ö —Å –ø–æ–º–æ—â—å—é vkbottle
    :param token: –í–ö —Ç–æ–∫–µ–Ω
    :param group_link: –°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É
    :return: –°–ª–æ–≤–∞—Ä—å —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –ª–∏–±–æ –≥—Ä—É–ø–ø—É, –ª–∏–±–æ –æ—à–∏–±–∫—É
    """
    group_name = group_link.split('/')[-1]
    api = API(token)
    try:
        r = await api.utils.resolve_screen_name(screen_name=group_name)
    except (VKAPIError[1116], VKAPIError[5]) as e:
        print('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')
        return {'error_msg': '–ù–µ –≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω'}
    except VKAPIError as e:
        print(e.error_msg, e.code)
        return {'error_msg': f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: error:{e.error_msg}, code:{e.code}'}
    else:
        return {'group_id': int(r.object_id)}


async def publish_to_yd(login, password, station_id, group_ids, group_vals):
    """
    –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–≤–µ—Ç–æ—Ñ–æ—Ä–∞ –Ω–∞ YD
    :param login: –õ–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param password: –ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param station_id: ID —Å—Ç–∞–Ω—Ü–∏–∏
    :param group_ids: –°–ø–∏—Å–æ–∫ ID –≥—Ä—É–ø–ø
    :param group_vals: –°–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π –≥—Ä—É–ø–ø
    :return: None
    """
    groups = ['reserv[' + x + ']' for x in group_ids.split(',')]
    blood_reserve_id = group_ids.split(',')[0]
    vals = group_vals.split(',')
    yd_data = dict(zip(groups, vals))
    yd_data['spk_id'] = station_id
    async with httpx.AsyncClient() as client:
        #TODO: –¥–æ–±–∞–≤–∏—Ç—å try
        await client.post('https://adm.yadonor.ru/index.php?obj=BLOOD_STATIONS',
                          data={'login': login, 'password': password})
        # TODO: –ò—Å–ø—Ä–∞–≤—Ç—å reservid
        r = await client.post(f'https://adm.yadonor.ru/index.php?obj=BLOOD_RESERVE&action=change&BLOOD_RESERVE_ID={blood_reserve_id}&BLOOD_STATIONS_ID={station_id}'
                          , data=yd_data)
        print(r.request)

async def publish_to_vk(vk_token: str, org_dir: str, image_name: str, group_id: int, text: str, is_pin: bool =True,
                        prev_post_id: int=None, is_del_post: bool=True):
    """
    –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–≤–µ—Ç–æ—Ñ–æ—Ä–∞ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ VK
    :param vk_token: –¢–æ–∫–µ–Ω –í–ö
    :param org_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏
    :param image_name: –ò–º—è —Ñ–∞–π–ª–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏
    :param group_id: ID –≥—Ä—É–ø–ø—ã –≤ –í–ö
    :param text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    :param is_pin: –§–ª–∞–≥ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Å–≤–µ—Ç–æ—Ñ–æ—Ä–∞ –Ω–∞ —Å—Ç–µ–Ω–µ
    :param prev_post_id: ID –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–æ—Å—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    :return:
    """
    api = API(vk_token)
    try:
        if prev_post_id and is_del_post:
            await api.wall.delete(owner_id=-group_id, post_id=prev_post_id)
        photo_uploader = PhotoWallUploader(api)
        img_path = config.BASE_DIR / 'img' / org_dir / image_name
        photo = await photo_uploader.upload(file_source=str(img_path), group_id=group_id)
        post_response = await api.wall.post(owner_id=-group_id, from_group=True, message=text, attachments=[photo])
        print(post_response)
        if is_pin:
            await api.wall.pin(owner_id=-group_id, post_id=post_response.post_id)
    except (VKAPIError[1116], VKAPIError[5]) as e:
        print('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')
        return {'error_msg': '–ù–µ –≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω'}
    except VKAPIError as e:
        print(e.error_msg, e.code)
        return {'error_msg': f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: error:{e.error_msg}, code:{e.code}'}
    else:
        return {'post_id': post_response.post_id}
